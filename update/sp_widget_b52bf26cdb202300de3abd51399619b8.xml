<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function(glideUserSession, spModal) {
  /* widget controller */
  var c = this;
	//Convert numbers to days of week
	c.weekday = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
	c.months = [ "January", "February", "March", "April", "May", "June", 
           "July", "August", "September", "October", "November", "December" ];
	c.groupOptions =[];
	c.canDelete = false;
	//alert(c.data.currentDay.day);
	//alert(c.data.week[9].day);
	for(var i = 0; i < c.data.groupNames.length; i++){
		c.groupOptions.push({'name': c.data.groupNames[i],
													'value' : i});
	}
	c.currentWeek = 0;
	
	c.newEntry = function(){
		var curURL = top.location + "";
		var i = 0;
		while(curURL.substring(i, i + 11) != "service-now")
			i++;
		var URL = curURL.substring(0, i) + "service-now.com/sp?id=form&table=x_113761_ucd_shift_shifts&sys_id=-1";
		URL += "&groupID=" + c.data.groups[c.data.option];
		URL += "&userID=" + c.data.userID;
		
		//window.open(URL,'title', 'width=800, height=700');
    //return false;
		window.location = URL;
	};
	
	c.enableDelete = function(){
		c.canDelete = !c.canDelete;
		if(c.canDelete){
				glideUserSession.loadCurrentUser().then(function(currentUser) {
				c.server.update();
				});			
		}
	};
	
	c.deleteEntry= function(shift){
		spModal.confirm("Delete this shift?").then(function(confirmed){
			if (confirmed) {
				glideUserSession.loadCurrentUser().then(function(currentUser) {
				c.data.shiftToDelete = shift.sys_id;
				c.server.update();
				});
			}
		})
	};
	
	c.editEntry = function(shift){
		var curURL = top.location + "";
		var i = 0;
		while(curURL.substring(i, i + 11) != "service-now")
			i++;
		var URL = curURL.substring(0, i) + "service-now.com/sp?id=form&table=x_113761_ucd_shift_shifts&sys_id=";
		URL += shift.sys_id;
		window.location = URL;
	};
	
	c.changeWeek = function(changedWeek){
		if(c.currentWeek + changedWeek < 0){
			spModal.alert("You cannot go prior to the current week");
			return;
		}
		c.currentWeek += changedWeek;
		c.data.newWeek = c.currentWeek;
		c.server.update().then(function(){

		});
		//alert(c.data.newWeek);

	};
	
	c.filteredShift = [];
	c.filter = function(group){
		c.server.update().then(function(){
		});	
	};
	
	//On Click Functions
	c.trade = function(shift){
		var curURL = top.location + "";
		var i = 0;
		while(curURL.substring(i, i + 11) != "service-now")
			i++;
		var URL = curURL.substring(0, i) + "service-now.com/sp?id=sc_cat_item&sys_id=2fe66f08db102300de3abd513996196e";
		URL += "&shiftid=" + shift.sys_id;
		window.open(URL);
	};
	
	c.take = function(shift){
		spModal.confirm("Take this shift?").then(function(confirmed){
			if (confirmed) {
				glideUserSession.loadCurrentUser().then(function(currentUser) {
				c.data.userID = currentUser.userID;
				c.data.shiftID = shift.sys_id;
				c.server.update();
					
				});
			}
		})
	};
	
	c.cover = function(shift){
		var curURL = top.location + "";
		var i = 0;
		while(curURL.substring(i, i + 11) != "service-now")
			i++;
		var URL = curURL.substring(0, i) + "service-now.com/sp?id=sc_cat_item&sys_id=2fe66f08db102300de3abd513996196e";
		URL += "&coverid=" + shift.sys_id;
		window.open(URL);
	};
	
	c.onWidget = function(){
		    spModal.open({
            title: 'Give me a name',
            message: 'What would you like to name it?',
            input: true,
            value: c.name
        }).then(function(name) {
            c.name = name;
        })   
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>td,
th {
    border: 1px solid rgb(190, 190, 190);
    padding: 10px;
 		align: top;
}

td {
    text-align: center;
  	font-weight: bold;
  	font-size: 1.5em;
}
select{
    background: rgba(0,0,0,0.3);
    color:#fff;
}
tr:nth-child(even) {
    background-color: #eee;
}

th[scope="col"] {
    background-color: #696969;
    color: #fff;
}

th[scope="row"] {
    background-color: #d7d9f2;
}

caption {
    padding: 10px;
    caption-side: bottom;
}

table {
    border-collapse: collapse;
    border: 0px solid rgb(200, 200, 200);
    letter-spacing: 1px;
    font-family: sans-serif;
    font-size: .8rem;
  	table-layout: fixed;
}

.selector{
  float: right;
  margin-right: 5px;
}

.buttons{
	background-color: #fff;
  color: #1F8476;
  border: none;
  padding: 3px 10px;
  text-align: center;
  float: right;
  margin: 5px 5px;
  margin-top: -3px;
}

.button-delete{
  background-color: #fff;
  color: #1F8476;
  border: none;
  padding: 3px 3px;
  text-align: center;
}

.listname{
	text-align: center;
}

.currentDay{
 	background-color: #1F8476 ! important;
  color: #fff;
}

.newline {
  display: block;
}

.loader {
  border: 8px solid 1F8476fff; /* Light grey */
  border-top: 8px solid #fff; /* Blue */
  border-radius: 50%;
  width: 10px;
  height: 10px;
  animation: spin 2s linear infinite;
  float: right;
  margin-right: 9px;
  margin-top: 5px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>shift_scheduler</id>
        <internal>false</internal>
        <link/>
        <name>Shift Scheduler</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	
	if(input) {
		//Taking open shift
		if(input.shiftID){
			var gr = new GlideRecord('x_113761_ucd_shift_shifts');
			gr.addQuery('sys_id', input.shiftID);
			gr.query();
			if(gr.next()){
				gr.assigned_to = input.userID;
				gr.update();
			}
		}
		if(input.shiftToDelete){
			var gr = new GlideRecord('x_113761_ucd_shift_shifts');
			gr.addQuery('sys_id', input.shiftToDelete);
			gr.query();
			
			if(gr.next()){
				gr.deleteRecord();
			}
		}
	}
	data.formWidget = { table: "x_113761_ucd_shift_shifts", sys_id: "-1", hideRelatedLists: false };
	
	data.currUser = gs.getUserDisplayName();
	data.userID = gs.getUserID();
	data.groups = getGroups();
	data.groupNames = getGroupNames(data.groups);
	data.isManager = getManager();
	var today = new GlideDateTime();
	data.currentDay = {month: today.getMonthLocalTime(), day: today.getDayOfMonthLocalTime()};

	if(input){
		var option = 0;
		var week = 0;
		if(input.option){
			option = input.option;
		}
		if(input.newWeek){
			week = input.newWeek;
		}
		//If current week is odd matching TRS
		if((today.getWeekOfYearLocalTime() % 2) == 1){
			getDates(week);
			data.shifts = getShifts(data.groups[option], week);
		}
		else{
			getDates(week - 1);
			data.shifts = getShifts(data.groups[option], week - 1);
		}	
	}
	else {
		//If current week is odd
		if((today.getWeekOfYearLocalTime() % 2) == 1){
			getDates(0);
			data.shifts = getShifts(data.groups[0], 0);
		}
		else{
			getDates(-1);
			data.shifts = getShifts(data.groups[0], -1);
		}
		if(input && input.option)
			data.option = input.option;
	}
	//Get Next month for display in January/February... December/January cases	
	data.nextMonth = (data.month != 11) ? (data.month + 1) : 0;

	//Sees if user is manager of current group
	function getManager(){
		var grUser = new GlideRecord('sys_user_group');
		grUser.addQuery('manager', data.userID);
		if(input && input.option){
			grUser.addQuery("sys_id", data.groups[input.option])
		}
		else {
			grUser.addQuery("sys_id", data.groups[0])
		}
		grUser.setLimit(1);
		grUser.query();
		return (grUser.next()) ? true : false;
	}
	//Get Groups
	function getGroups(){
		var results = [];
		var gr = new GlideRecord("sys_user_grmember");
		gr.addQuery("user", data.userID);
		gr.query();
		while(gr.next()){
			results.push(gr.getValue("group"));
		}
		
		return results;
	}
	
	function getGroupNames(groups){
		var results = [];
		for(var i = 0; i < groups.length; i++){
			var gr = new GlideRecord("sys_user_group");
			gr.addQuery("sys_id", groups[i]);
			gr.query();
			if(gr.next()){
				results.push(gr.getValue("name"));
			}
		}
		
		return results;
	}
	
	function daysInMonth(m, y) { // m is 0 indexed: 0-11
    switch (m) {
        case 1 :
            return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;
        case 8 : case 3 : case 5 : case 10 :
            return 30;
        default :
            return 31
    }
	}

	function isValid(d, m, y) {
		return m >= 0 && m < 12 && d > 0 && d <= daysInMonth(m, y);
	}
	
	function getMonday(d) {
  d = new Date(d);
  var day = d.getDay(),
      diff = d.getDate() - day + (day == 0 ? -6:1); // adjust when day is sunday
  return new Date(d.setDate(diff));
	}
	
	function getStartDate(date, week){
		var glideDate = new GlideDateTime();
		glideDate.addDaysLocalTime((7 * week) - date.getDay());
		return {month: glideDate.getMonthLocalTime() - 1, day: glideDate.getDayOfMonthLocalTime(), year: glideDate.getYearLocalTime()};
	}

	function getDates(week){
		var currDate = new Date();
		var date = new Date(currDate.getFullYear(), currDate.getMonth(), currDate.getDate()+(7*week));
		var start = getStartDate(date, week);
		data.month = start.month; //Edge case of multi month weeks
		data.year = start.year;
		data.week = [];
		data.multiMonth = false;
		//Figure out how to know how many months to decrement
		//This will allow going backwards previous to current date
		//if(week < 0){
		//	--data.month;
		//}
		var monthAug = 1;
		//How many days to store
		var upper = 14;
		for(var i = 0; i < upper; i++){
			var day = start.day + i;
			if(!isValid(day,start.month,start.year)){
				start.day = 1;
				upper -= i;
				start.month = (start.month != 11) ? (start.month + 1) : 0;
				i = 0;
				day = start.day;
				data.multiMonth = true;
			}
			
			//start.month + 1 because we index month 0-11 but display it 1-12
			data.week.push({month: (start.month + 1), day: day});
		}
	}
	
	//BUG doesnt query based on year
	function getShifts(groupID, week) {
		var results = [];
		var now = new GlideDateTime();
		var gr = new GlideRecord('x_113761_ucd_shift_shifts');
		gr.orderBy("start");
		gr.addQuery("assignment_group", groupID);
		gr.query();
		
		while (gr.next()) {
			if (!$sp.canReadRecord(gr))
				continue;
			
			var gdt = new GlideDateTime(gr.start);
			
			var shift = {}
			$sp.getRecordDisplayValues(shift, gr, 'assigned_to,start,end,sys_id,assignment_group');
			shift.start = convertTime(shift.start);
			shift.end = convertTime(shift.end);
			
			//First week. Day of week as a num. 1 = Monday, 2 = tuesday
			if(gdt.getWeekOfYearLocalTime() == (now.getWeekOfYearLocalTime() + week) % 52)
				shift.day = gdt.getDayOfWeekLocalTime() - 1;
			//Second week
			else if(gdt.getWeekOfYearLocalTime() == (now.getWeekOfYearLocalTime() + week + 1) % 52)
				shift.day = gdt.getDayOfWeekLocalTime() - 1 + 7;
			
			results.push(shift);			
			//return results;
		}
		
		function convertTime(date){
			var converted = date.substring(date.length - 8, date.length);
			var hours = converted.substring(0,2);
			var minutes = converted.substring(3,5);
			var ampm = hours >= 12 ? 'pm' : 'am';
			hours = hours % 12;
			hours = hours ? hours : 12;
			return hours + ":" + minutes + ampm;
		}
		return results;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-11 18:02:12</sys_created_on>
        <sys_id>b52bf26cdb202300de3abd51399619b8</sys_id>
        <sys_mod_count>1201</sys_mod_count>
        <sys_name>Shift Scheduler</sys_name>
        <sys_package display_value="UCD Shift Scheduler" source="x_113761_ucd_shift">7a5fd304db102300de3abd5139961929</sys_package>
        <sys_policy/>
        <sys_scope display_value="UCD Shift Scheduler">7a5fd304db102300de3abd5139961929</sys_scope>
        <sys_update_name>sp_widget_b52bf26cdb202300de3abd51399619b8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-19 22:01:38</sys_updated_on>
        <template><![CDATA[<div class="panel panel-primary">
  <link rel="stylesheet" href="styles/retina_icons/retina_icons.css ">
  <!--Header-->
  <!--<widget id="widget-form" options='data.formWidget'></widget>-->
    <div class="panel-heading">
      	<span ng-if="!c.data.multiMonth">{{c.months[c.data.month]}} {{c.data.year}}</span>
       	<span ng-if="c.data.multiMonth">{{c.months[c.data.month]}}/{{c.months[c.data.nextMonth]}} {{c.data.year}}</span>
      	<button ng-if="c.data.isManager" class="buttons icon-add-circle-empty" type="button" ng-click="c.newEntry()"></button>
        <button ng-if="c.data.isManager" class="buttons icon-trash" type="button" ng-click="c.enableDelete()"></button>        
      	<button class="buttons icon-arrow-right" type="button" ng-click="c.changeWeek(2)"></button>
        <button class="buttons icon-arrow-left" type="button" ng-click="c.changeWeek(-2)"></button>
        <select class="selector" ng-init="c.data.option=0" ng-model="c.data.option" ng-change="c.filter(c.data.option)" ng-options="template.value as template.name for template in c.groupOptions">
            <option value="" ng-show="false"></option>
        </select>
        
      	<!--<div class="loader"></div>-->

    </div>
  
		
   	<!--Day of Week-->
    <table border="1" width="100%" style="margin: 0px;">
      <tr>
        <td ng-repeat="i in [0,1,2,3,4,5,6]">
          {{c.weekday[i]}}
        </td>
      </tr>
  	</table>
  	<!--Dates Row 1-->
    <table border="0" width="100%" style="margin: 0px;">
        <tr>
            <td ng-repeat="i in [0,1,2,3,4,5,6]">
                {{c.data.week[i].month}}/{{c.data.week[i].day}}
            </td>
        </tr>
      
        <tr>
            <!--Day-->
            <th ng-repeat="i in [6,0,1,2,3,4,5]">
            <!--Shift entries-->
            <div class="list-group result-container">
                <li class="list-group-item listname" ng-repeat="shift in c.data.shifts" ng-if="shift.day ==i">
                  	<a href ng-if="shift.assigned_to == ''" ng-click = c.take(shift)>Open</a>
                    <a href ng-if="shift.assigned_to == c.data.currUser" ng-click="c.cover(shift)">{{shift.assigned_to}}</a>
                    <a href ng-if="shift.assigned_to != c.data.currUser" ng-click="c.trade(shift)">{{shift.assigned_to}} {{count}}</a>
                    <span class="newline">{{shift.start}}</span>
                    <span class="newline">{{shift.end}}</span>
                    <button ng-if="c.data.isManager && c.canDelete" class="button-delete icon-trash" type="button" ng-click="c.deleteEntry(shift)"></button>
                  	<button ng-if="c.data.isManager" class="button-delete icon-edit" type="button" ng-click="c.editEntry(shift)"></button>
                </li>
            </div>
            </th>
        </tr>
    </table>
		
  <!--Dates row 2-->
    <table border="1" width="100%" style="margin: 0px;">
        <tr>
            <td ng-repeat="i in [7,8,9,10,11,12,13]" ng-class="{currentDay: c.data.currentDay.month==c.data.week[i].month && c.data.currentDay.day==c.data.week[i].day}">
                {{c.data.week[i].month}}/{{c.data.week[i].day}}
            </td>
        </tr>
    		
        <tr>
          	<!--Day-->
            <th ng-repeat="i in [13,7,8,9,10,11,12]">
            <!--Shift entries-->
            <div class="list-group result-container">
                <li class="list-group-item listname" ng-repeat="shift in c.data.shifts" ng-if="shift.day==i">
                    <a href ng-if="shift.assigned_to == ''" ng-click = c.take(shift)>Open</a>
                    <a href ng-if="shift.assigned_to == c.data.currUser" ng-click="c.cover(shift)">{{shift.assigned_to}}</a>
                    <a href ng-if="shift.assigned_to != c.data.currUser" ng-click="c.trade(shift)">{{shift.assigned_to}} {{count}}</a>
                    <span class="newline">{{shift.start}}</span>
                    <span class="newline">{{shift.end}}</span>
                    <button ng-if="c.data.isManager && c.canDelete" class="button-delete icon-trash" type="button" ng-click="c.deleteEntry(shift)"></button>
              	    <button ng-if="c.data.isManager" class="button-delete icon-edit" type="button" ng-click="c.editEntry(shift)"></button>
              	</li>
            </div>
            </th>
        </tr>
    </table>
</div>]]></template>
    </sp_widget>
</record_update>
